E.setBootCode("Modules.addCached(\"BMP085\",\"function c(b,a){this.i2c=b;this.oss=\\\"undefined\\\"!==typeof a?a:3;if(3<this.oss||0>this.oss)this.oss=3;var d=this.read8(208);if(85!=d)return console.log(\\\"Bad ID of: \\\"+d),null;this.readCoefficients()}c.prototype.read16=function(b){this.i2c.writeTo(119,b);b=this.i2c.readFrom(119,2);return b[0]<<8|b[1]};c.prototype.readS16=function(b){this.i2c.writeTo(119,b);b=this.i2c.readFrom(119,2);b=b[0]<<8|b[1];return 32767<b?b-65536:b};c.prototype.read8=function(b){this.i2c.writeTo(119,b);return this.i2c.readFrom(119,\\n1)[0]};c.prototype.readCoefficients=function(){this.ac1=this.readS16(170);this.ac2=this.readS16(172);this.ac3=this.readS16(174);this.ac4=this.read16(176);this.ac5=this.read16(178);this.ac6=this.read16(180);this.b1=this.readS16(182);this.b2=this.readS16(184);this.mb=this.readS16(186);this.mc=this.readS16(188);this.md=this.readS16(190)};c.prototype.readRawTemperature=function(b){this.i2c.writeTo(119,[244,46]);var a=this;setTimeout(function(){b(a.read16(246))},5)};c.prototype.readRawPressure=function(b){this.i2c.writeTo(119,\\n[244,52+(this.oss<<6)]);var a=this;switch(this.oss){case 0:var d=5;break;case 1:d=8;break;case 2:d=14;break;case 3:d=26}setTimeout(function(){var d=a.read8(246),c=a.read8(247),e=a.read8(248);b((d<<16)+(c<<8)+e>>8-a.oss)},d)};c.prototype.getTemperature=function(b){var a=this;this.readRawTemperature(function(d){d=Math.round((d-a.ac6)*a.ac5/32768);b((d+Math.round(2048*a.mc/(d+a.md))+8)/160)})};c.prototype.getPressure=function(b){var a=this;this.readRawTemperature(function(d){a.readRawPressure(function(c){var f=\\nMath.round((d-a.ac6)*a.ac5/32768);f+=Math.round(2048*a.mc/(f+a.md));var e=f-4E3;c=Math.round((c-((4*a.ac1+(a.b2*(e*e>>12)>>11)+(a.ac2*e>>11)<<a.oss)+2>>2))/(a.ac4*(((a.ac3*e>>13)+(a.b1*(e*e>>12)>>16)+2>>2)+32768)>>15)*(5E4>>a.oss))<<1;b({pressure:c+(((c>>8)*(c>>8)*3038>>16)+(-7357*c>>16)+3791>>4),temperature:(f+8)/160})})})};c.prototype.getAltitude=function(b,a){return 44330*(1-Math.pow(b/a,1/5.255))};c.prototype.getSeaLevel=function(b,a){return b/Math.pow(1-a/44330,5.255)};exports.connect=function(b,\\na){return new c(b,a)}\");\nModules.addCached(\"./config.js\",\"module.exports={WIFI:{SSID:'BeijinhoCasa',hostname:'nomada-espruino',options:{password:'bacalao2017'}}};\");\nconst WIFI = require('Wifi');\nconst HTTP = require('http');\nconst BMP085 = require('BMP085');\nconst CONFIG = require('./config.js');\nconst BMP_MODE = 3;\nconst LED = NodeMCU.D4;\nconst PORT = 8080;\nconst SEALEVEL = 99867; // current sea level pressure in Pa\nconst I2CBUS = new I2C();\nvar BMP = null;\n\nconst STATE = {\n    ledStatus: true,\n};\n\nconst setWifi = function () {\n    WIFI.setHostname(CONFIG.WIFI.hostname, function () {\n        console.log('INFO: Wifi Hostanme seted', arguments);\n    });\n    WIFI.connect(CONFIG.WIFI.SSID, CONFIG.WIFI.options, function () { \n        console.log('INFO: Wifi connection', arguments); \n    });echo\n    WIFI.stopAP();\n};\n\nconst getUptime = function () {\n    return Date.now() - STATE.startTime;\n};\n\nconst setLed = function (status) {\n    ledStatus = status;\n    digitalWrite(LED, ledStatus);\n};\n\nconst infoResponse = function (res) {\n    doResponse(res, 200, {\n        upTime: getUptime(),\n        startTime: STATE.startTime,\n    });\n};\n\nconst sensorResponse = function (res) {\n    if (BMP !== null) {\n        BMP.getPressure(function (d) {\n            let altitude = BMP.getAltitude(d.pressure, SEALEVEL);\n            console.log('INFO: Pressure: ' + d.pressure + ' Pa');\n            console.log('INFO: Temperature: ' + d.temperature + ' C');\n            console.log('INFO: Altitude: ' + altitude + ' m');\n\n            sendOKResponse(res, {\n                pressure: d.pressure,\n                temperature: d.temperature,\n                altitude: altitude,\n                upTime: getUptime(),\n                startTime: STATE.startTime,\n            });\n        });\n    } else {\n        console.log('INFO: Sensor not connected');\n        errorResponse(res, 500, 'Sensor not connected');\n    }\n};\n\nconst ledResponse = function (res) {\n    sendOKResponse(res, {\n        led: STATE.ledStatus,\n        upTime: getUptime(),\n        startTime: STATE.startTime,\n    });\n};\n\nconst sendOKResponse = function (res, data) {\n    doResponse(res, 200, data);\n};\n\nconst errorResponse = function (res, code, message) {\n    doResponse(res, code, {\n        error: message,\n        upTime: getUptime(),\n        startTime: STATE.startTime,\n    });\n};\n\nconst doResponse = function (res, code, data) {\n    res.writeHead(code, { 'Content-Type': 'application/json' });\n    res.write(JSON.stringify(data));\n    res.end();\n};\n\nconst connectResponse = function (res) {\n    var connected = (BMP !== null);\n    sendOKResponse(res, {\n        bmp: connected,\n        upTime: getUptime(),\n        startTime: STATE.startTime,\n    });\n};\n\nconst getRoutes = function (req, res) {\n    switch (req.url) {\n        case '/':\n            console.log('INFO: Main page');\n            infoResponse(res);\n            break;\n        case '/sensor':\n            console.log('INFO: Sensor response');\n            sensorResponse(res);\n            break;\n        case '/led':\n            console.log('INFO: Get status of the LED');\n            ledResponse(res);\n            break;\n        default:\n            console.log('INFO: GET URL not handled, ' + req.url);\n            errorResponse(res, 404, 'GET Url not handled');\n            break;\n    }\n};\n\nconst postRoutes = function (req, res) {\n    switch (req.url) {\n        case '/led':\n            console.log('INFO: LED Post route');\n            getPostData(req, res, handleLedRoute);\n            break;\n        case '/connect':\n            console.log('INFO: Try to reconect to the sensor');\n            connectToSensor();\n            connectResponse(res);\n            break;\n        default:\n            console.log('INFO: POST URL not handled, ' + req.url);\n            errorResponse(res, 404, 'POST Url not handled');\n            break;\n    }\n};\n\nconst getPostData = function (req, res, callback) {\n    var data = '';\n    req.on('data', function (d) { data += d; });\n    req.on('end', function () {\n        var parsedData = JSON.parse(data);\n        callback(parsedData, res);\n    });\n};\n\nconst handleLedRoute = function (data, res) {\n    if (data.status === true) {\n        setLed(true);\n        ledResponse(res);\n    } else if (data.status === false) {\n        setLed(false);\n        ledResponse(res);\n    } else {\n        console.log('INFO: Invalid data , ' + data);\n        errorResponse(res, 403, 'Invalid Data');\n    }\n};\n\nconst createServer = function (port) {\n    console.log('INFO: Start Time ' + STATE.startTime);\n    HTTP.createServer(function (req, res) {\n        console.log('INFO: Starting server at port ' + port);\n        switch (req.method) {\n            case 'GET':\n                getRoutes(req, res);\n                break;\n            case 'POST':\n                postRoutes(req, res);\n                break;\n            default:\n                console.log('INFO: Method not handled, ' + req.method);\n                errorResponse(res, 405, 'Method not handled');\n                break;\n        }\n    }).listen(port);\n};\n\nconst connectToSensor = function () {\n    BMP = BMP085.connect(I2CBUS, BMP_MODE);\n    if (BMP !== null) {\n        console.log('INFO: Sucessfuly connected to sensor');\n    } else {\n        console.log('INFO: Error connecting to sensor');\n    }\n};\n\nconst configureIC2 = function () {\n    console.log('INFO: configure IC2');\n    I2CBUS.setup({ scl: NodeMCU.D1, sda: NodeMCU.D2 });\n};\n\nconst configureLed = function () {\n    console.log('INFO: Configuring LED');\n    pinMode(LED, 'output');\n    digitalWrite(LED, STATE.ledStatus);\n};\n\nE.on('init', function () {\n    STATE.startTime = Date.now();\n    console.log('INFO: init board');\n    configureLed();\n    setWifi();\n    createServer(PORT);\n    configureIC2();\n    connectToSensor();\n});\n\nconsole.log('INFO: End of script file');\n");load()
